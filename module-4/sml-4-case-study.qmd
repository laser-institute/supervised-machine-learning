---
title: 'Modeling Interactions Data with Boosted Trees'
subtitle: "Case Study Key"
author: "LASER Institute"
date: today 
format:
  html:
    toc: true
    toc-depth: 4
    toc-location: right
theme:
  light: simplex
  dark: cyborg
editor: visual
# bibliography: lit/references.bib
resource_files:
- img/tidymodels.png
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
```

## 1. PREPARE

After interpreting our last model, it is easy to think we can do a little better. But, how? In this module, we'll do do things: 1) specify a more sophisticated model and 2) go deeper on some feature engineering.

Our driving question for this module, then, is: **How much can we improve our model?** Looking back to our predictive model from module 3, we can see that our accuracy was okay. Can we improve on that? Let's dive in! First, we'll briefly review two key concepts for the module.

### A more sophisticated model

we attempt to improve our predictive performance by switching to a more complex model than the logistic regression we have been usingâ€“specifically, to a type of model that is based on decision trees â€“ a boostedâ€‘tree model. In short, this is one way we can improve our model's predictions.

Boosted trees (gradient boosting) build a *sequence* of small "decision trees" (detailed in the conceptual overview), each one focusing on the records the previous trees struggled with. When tuned carefully (small learning rate, many trees) the ensemble can outperform other algorithms based on decision trees you may have heard of, like the random forest algorithm.

### A little background (and some readings) on feature engineering

Feature engineering is a rich topic in machine learning research, including in the learning analytics and educational data mining communities.

Consider research on online learning and the work of Rodriguez et al. (2021). In this study, *digital trace data*, data generated through users' interactions with digital technologies. Optionally, review this paper -- specifically how they processed the "clickstream" data. As this paper illustrates, there is not one way to use such data.

> Rodriguez, F., Lee, H. R., Rutherford, T., Fischer, C., Potma, E., & Warschauer, M. (2021, April). Using clickstream data mining techniques to understand and support first-generation college students in an online chemistry course. In *LAK21: 11th International Learning Analytics and Knowledge Conference* (pp. 313-322).

Notably, the authors took several steps to prepare the data so that it could be validly interpreted. The same is true here in the context of machine learning. In a different context, the work of Gobert et al. (2013) is a great example of using data from educational simulations. Optionally review this paper, too, focused on their use of a technique they called *replay tagging* to conduct feature engineering.

> Gobert, J. D., Sao Pedro, M., Raziuddin, J., & Baker, R. S. (2013). From log files to assessment metrics: Measuring students' science inquiry skills using educational data mining. *Journal of the Learning Sciences, 22*(4), 521-563.

Even after feature engineering, machine learning approaches can often (but not always) be improved by choosing a more sophisticated model type. Note how we used a regression model in the first two case studies; here, we explore a considerably more sophisticated model, a boosted tree. Feature engineering and choosing a more sophisticated model adds some complexity to the modeling. As we have discussed, it is easy to bias our results if we repeatedly check the performance of *different model fits* with the same test data. Cross-validation is one commonly used solution for this problem.

## 2. WRANGLE

## Step 0: Loading and setting up

First, let's load the packages we'll use---the familiar {tidyverse} and several others focused on modeling. Lastly, we'll load a new package, {arrow}; more on why, shortly.

#### **ðŸ‘‰ Your Turn** **â¤µ**

Add to the chunk below code to load:

-   **tidyverse**, **janitor**, **tidymodels**
-   **xgboost** (boostedâ€‘tree engine)
-   **vip** (variable importance plots)
-   **arrow** (for loading large data sets)

Load these with the library function, per usual.

```{r}

```

Let's get started! We have to do the same processing we did in the third module to obtain cut-off dates. The purpose of this is to train the model on data from the first one-third of the class, with the reasoning being this is a good time to interveneâ€”-far enough into the class to make an appreciable impact, but not too late to have a limited chance of being able to change students' trajectory in the class. We'll repeat the procedure we carried out with the assessments data: calculating a cut-off for each class and then filtering the data based upon this cut-off.

First, though, we need to load *a really big file* with all of the interactions data â€” one with interactions (or log-trace) data. In the OULAD documentation, this is called the VLE (virtual learning environment) data source. Please review the description of the variables in the *studentVLE* and *VLE* sources (which are joined together for this module) [here](https://analyse.kmi.open.ac.uk/open_dataset#description).

The data is in a file named `oulad-interactions.parquet` file. Youâ€™ll find this in the `data` folder. Why this format? Parquet is a modern, columnar storage format that is highly efficient for large datasets. It allows for compressed storage and faster reading, especially when you only need a subset of columns. If we had stored this same data in a plain-text format like CSV, it would have taken up significantly more space â€” potentially too much to include in this lab's repository at all (the file contains 5.5 million rows!).

The tradeoff is that Parquet files arenâ€™t immediately human-readable and canâ€™t be opened directly in Excel. However, for programmatic analysis with tools like Python and Pandas, itâ€™s an excellent option: compact, fast, and well-suited for large-scale data.

Now letâ€™s load it:

```{r}
interactions <- read_parquet("data/oulad-interactions.parquet")
interactions %>% 
    glimpse()
```

We can see that this file is indeed large - more than 10 million rows, with data on the number of *clicks* (`sum_clicks)` a student in a particular offering of a course makes with a particular component of the course (`id_site`) and the type of that component (`activity_type`). at a specific time.

Since you did something similar in the last module, you'll just run the code in the chunk below to calculate and filter the data based on a cut-off point (and associated date).

```{r}
assessments <- read_csv("data/oulad-assessments.csv")

code_module_dates <- assessments %>% 
   group_by(code_module, code_presentation) %>% 
  summarize(quantile_cutoff_date = quantile(date, probs = .25, na.rm = TRUE)) # change this throughout

interactions_joined <- interactions %>% 
    left_join(code_module_dates) # join the data based on course_module and course_presentation

interactions_filtered <- interactions_joined %>% 
    filter(date < quantile_cutoff_date) # filter the data so only assignments before the cutoff date are included
```

#### **ðŸ‘‰ Your Turn** **â¤µ**

Now, `glimpse()` the filtered data set you just created.

```{r}

```

What do you notice about this data in relation to the original data set? You may wish to `glimpse()` (or inspect in another way) the not filtered interactions data, too. Share a few notes on what you observe about these:

-   

-   

We will not only use this (filtered) interactions data, but also data on students and assessments. Here, we'll be expeditious by loading a file we created in the last module - `oulad-students_and_assessments.csv`. That is in this module's data folder; please load this in with `read_csv()`, as below.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

## 3. EXPLORE

#### **ðŸ‘‰ Your Turn** **â¤µ**

*First*, `count()` the `activity_type` variable in your filtered interactions data and *sort* the resulting output by frequency.

```{r}

```

What does this tell you? Consulting the codebook and your output, please add at least two notes on what you are noticing:

-   The most common activity type is "resource" with over 5 million interactions
-   Other common activities include homepage, quiz, oucontent, and url interactions

#### **ðŸ‘‰ Your Turn** **â¤µ**

*Second*, please create a histogram of the `date` variable.

```{r}

```

What does this tell you? Add one or more notes:

-   The distribution shows interaction patterns over time, with some peaks and valleys suggesting different activity levels throughout the course

#### **ðŸ‘‰ Your Turn** **â¤µ**

*Third*, please conduct one other data exploration step of your choosing. Options include creating simple graphs or calculating descriptive, summary statistics.

```{r}

```

We're ready to proceed to engineering some features with the interactions data. For the present time, we'll focus on the `sum_click` variable, which tells us how many times students clicked on a resource for a given date.

How can we create a feature with `sum_click`? Think back to our discussion in the presentation; we have *many* options for working with such time series data. Perhaps the most simple is to count the clicks. Please summarize the number of clicks for each student (specific to a single course). This means you will need to group your data by `id_student`, `code_module`, and `code_presentation`, and then create a summary variable. Assign the resulting output the name `interactions_summarized`. You may find the documentation for `summarize()` to be helpful. That is available [here](https://dplyr.tidymodels.org/reference/summarise.html). [This chapter](https://r4ds.had.co.nz/transform.html) is also likely helpful (note that `summarise()` and `summarize()` are different spellings for the same function).

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

#### **ðŸ‘‰ Your Turn** **â¤µ**

How many times did students click? Let's create a histogram to see. Please use {ggplot} and `geom_histogram()` to visualize the distribution of the `sum_clicks` variable you just created. Turn to [the documentation](https://ggplot2.tidymodels.org/reference/geom_histogram.html) if you need a pointer!

```{r}

```

This is a good start - we've created our first feature based upon the log data, `sum_clicks`! What are some other features we can add? An affordance of using the `summarize()` function in R is we can create multiple summary statistics at once. Let's also calculate the standard deviation of the number of clicks as well as the mean. Please copy the code you wrote above into the code chunk below and then add these two additional summary statistics.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

We'll take one last step here -- creating individual *slopes* of students' clicks over time. This code is a bit more involved, and so is annotated for you below; feel free to modify and re-use this.

First, we use a custom function that can deal with cases where the fitting of the slopes fails (e.g., for students with only a single data point, or some other unanticipated issue with the model estimation).

```{r}
# Define a function to fit the model and handle warnings
fit_model <- function(data) {
    tryCatch(
        { 
            # Fit a linear model with sum_click as the response and date as the predictor
            model <- lm(sum_click ~ date, data = data)
            # Tidy the model output (convert to a tidy data frame)
            tidy(model) 
        },
        # Handle errors: return a tibble with NA values
        error = function(e) { tibble(term = NA, estimate = NA, std.error = NA, statistic = NA, p.value = NA) },
        # Handle warnings: return a tibble with NA values
        warning = function(w) { tibble(term = NA, estimate = NA, std.error = NA, statistic = NA, p.value = NA) }
    )
}
```

**Note: this next step may take up to a minute or so! Please feel free to relax!**

```{r}
# Fit the models for each group
interactions_slopes <- interactions_filtered %>%
    group_by(id_student, code_module, code_presentation) %>% # Group by student and course
    nest() %>% # Nest the data frame, creating a list of data frames for each group
    mutate(model = map(data, fit_model)) %>% # Apply the fit_model function to each nested data frame
    unnest(model) # Unnest the model output, returning to a regular data frame
```

We'll do a bit of data wrangling.

```{r}
# Process the output
interactions_slopes <- interactions_slopes %>%
    ungroup() %>% # Remove grouping
    select(code_module, code_presentation, id_student, term, estimate) %>% # Select relevant columns
    filter(!is.na(term)) %>% # Filter out rows where term is NA
    spread(term, estimate) %>% # Spread the terms into separate columns
    mutate_if(is.numeric, round, 4) # Round numeric columns to 4 decimal places
```

Please rename the resulting intercept and date, changing them`intercept` and `slope`, respectively. Note, selecting a variable with a parenthesis in it can be tricky! Think of other ways you could do this, if you wish (hint: think of what a function in janitor can do!).

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

After running this code, we will have intercepts, linear slopes, and quadratic terms for each students' clickstream pattern over the semester.

Let's join together several files. First, let's join all our features into a single file. Please use `left_join()` to join `interactions_summarized` and `interactions_slopes`, assigning the resulting output the name `interactions_summarized_and_slopes`.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

Just one last step! Let's join together *all* of the data we'll use for our modeling: `students_and_assessments` and `interactions_summarized_and_slopes`. Use `left_join()` once more, assigning the resulting output the name `students_assessments_and_interactions`. Lots of joining! Sometimes, the hardest part of complex analyses lies in the preparation (and joining) of the data.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

One more small step. Let's ensure that our outcome variable -- `pass` -- is a factor. It was, but when saving to and reading from a CSV, it lots its factor characteristics, becoming instead a character string. It is necessary for the outcome of a classification model (like the one we are using) to be a factor. Please use `mutate()` to do just that.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

We're now ready to model!

## 4. MODEL

### Step 1. Split data

We'll follow the same steps we followed in modules #2 and #3, here. One difference - we'll use `students_assessments_and_interactions` instead of the data frame we used in those modules. Please port over the code you used in those modules here, changing the name of the data frame to the one we are now using.

We discuss this first step minimally as we have now carried out a step very similar to this in LL1 and LL2; return to the case study for those (especially LL1) for more on data splitting.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

There is a key difference that is next. In this step. we'll further process `data_train`, creating different subsets of the data, or folds of the data, that we can use to fit our model multiple times.

```{r}
vfcv <- vfold_cv(data_train) # this differentiates this from what we did before
# before, we simple used data_train to fit our model
vfcv
```

How does this work? `data_train` is sampled as many time as we set.

Above, we split the data into 10 different folds. Change the number of folds from 10 to 5 by changing the value of v; 10 is simply the default---not always the best one! For help, run `?vfold_cv` to get a hint.

```{r}
kfcv <- vfold_cv(data_train, v = 5) # Changed from 10 to 5
kfcv
```

### Step 2: Engineer features and write down the recipe

Here, we'll carry out several feature engineering steps.

Read about [possible steps](https://www.tmwr.org/recipes.html) and see more about how the following five feature engineering steps below work. Like in the previous learning labs, this is the step in which we set the recipe.

-   [`step_normalize()`](https://recipes.tidymodels.org/reference/step_normalize.html): normalizes numeric data to have a standard deviation of one and a mean of zero
-   [`step_dummy()`](https://recipes.tidymodels.org/reference/step_dummy.html): convert nominal data (e.g. character or factors) into one or more numeric binary model terms for the levels of the original data.
-   [`step_impute_knn()`](https://recipes.tidymodels.org/reference/step_impute_knn.html): impute missing values using the nearest neighbors method

We will use all three of these. Please note that there are two ways to use each of these. One of them is by *specifying the specific variable* you want to use for the feature engineering step. For example, below, we would normalize a hypothetical variable, one called `minutes_of_videos_watched` (**note, this code isn't meant to run!**):

```{r, eval = FALSE}
step_normalize(minutes_of_videos_watched)
```

Another way is to specify *for which types of variables* the feature engineering step applies. You can see all of the available types [here](https://recipes.tidymodels.org/reference/has_role.html). For example, the code below would normalize all numeric variables:

```{r, eval = FALSE}
step_normalize(all_numeric_predictors())
```

#### **ðŸ‘‰ Your Turn** **â¤µ**

Let's turn to our recipe. Please *add to* the code below to add the new variables---features---we created. We've started you off with \_\_\_ code below (where you can add the new variables -- be sure to add all of them!).

```{r}

```

#### **ðŸ‘‰ Your Turn** **â¤µ**

Then, please *add to* the following code by completing three steps, building on the code that is started below:

1.  Please normalize all numeric predictors.
2.  Please dummy code the following three variables: `disability`, `gender`, and `code_module`.
3.  Please impute missing values using the nearest neighbors method for the `mean_weighted_score`, `sum_clicks`, `sd_clicks`, `mean_clicks`, `intercept`, `slope`, and `date_registration` variables.

```{r}

```

### Step 3: Specify the model and workflow

Next, we specify the model and workflow, using the same engine *but a different engine and mode*, here, regression for a *continuous outcome*. Specifically, we are:

-   using the `boost_tree()` function to set the *model* as a boosted tree
-   using `set_engine("xgboost", importance = "gain")` to set the *engine* as that provided for boosted trees through the {xgboost} package; we also add the `importance = "gain"` line to be able to interpret a variable importance metric specific to boosted tree models
-   finally, using `set_mode("classification"))` as we are again predicting categories

```{r panel-chunk-3, echo = TRUE, eval = TRUE}

# specify model
my_mod <-
  boost_tree(learn_rate = 0.05, trees = 1000, tree_depth = 4) %>%  # boosted tree
  set_engine("xgboost", importance = "gain") %>% # xgboost engine and a variable importance metric
  set_mode("classification")

# specify workflow
my_wf <-
  workflow() %>% # create a workflow
  add_model(my_mod) %>% # add the model we wrote above
  add_recipe(my_rec) # add our recipe we wrote above
```

**Why those defaults?** **trees**: many small steps (1000) **learn_rate**: 0.05 (smaller â†’ less variance needs more trees) **tree_depth**: shallow (4) to avoid overâ€‘fitting

### Step 4: Fit model

Note that here we use the `kfcv` data and a different function - `fit_resamples()`, instead of `fit()`. This function is required when we have multiple folds of our sample, as we created using the vfcv function above. See more about this function [here](https://tune.tidymodels.org/reference/fit_resamples.html).

```{r}
class_metrics <- metric_set(accuracy, sensitivity, specificity, ppv, npv, kap) # specify the same metrics as earlier
fitted_model_resamples <- fit_resamples(my_wf, 
                                        resamples = kfcv, # Changed from vfcv to kfcv
                                        metrics = class_metrics)
```

Note that you have fit as many models as the value for `v` that you specified earlier. So, this may take some time. Take a walk, grab a snack, or make a cup of tea!

Then, we can use the same `collect_metrics()` function we have used to inspect the predictive strength of the model. Please do that for `fitted_model_resamples`.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

We noted earlier that we may introduce bias when we evaluate different models against the same training data. The benefit of using the multiple folds - and fitting multiple models - is we can make changes to our features or model. Thus, if we decide to add a new feature, we can run the above steps, without concern about biasing our interpretation of how accurate our model is.

That is, we can be unconcerned about inadvertently introducing bias until we reach the last step - fitting our last model. We can do that using the familiar `fit()` function, followed by `last_fit`. It is important to not make further changes after this point.

```{r}
final_fit <- last_fit(my_wf, train_test_split, metrics = class_metrics)
```

### Step 5: Interpret accuracy

Finally, collect the metrics for our final fit. *These* are the values that you should report as final.

```{r}
final_fit %>% 
  collect_metrics()
```

We can see that `final_fit` is for a single fit: a boosted tree model with the best performing tuning parameters trained with the *entire* training set of data to predict the values in our (otherwise not used/"spent") testing set of data.

#### **ðŸ‘‰ Your Turn** **â¤µ**

```{r}

```

## 5. COMMUNICATE

Another benefit of a boosted tree model is we can interpret variable importance metrics. Do that here with the following code.

```{r}
final_fit %>% 
  pluck(".workflow", 1) %>%   
  extract_fit_parsnip() %>% 
  vip(num_features = 10)
```

Please add two or more notes on what you notice about which variables (features) are important, focused on what you would say to someone in your audience about what the important variables in your model were.

-   The mean weighted score remains the most important predictor, similar to the random forest model
-   The interaction features (sum_clicks, mean_clicks, etc.) show varying levels of importance, indicating that student engagement patterns do contribute to predicting success

### ðŸ§¶ Knit & Check âœ…

Congratulations - you've completed this case study! Consider moving on to the badge activity next.
