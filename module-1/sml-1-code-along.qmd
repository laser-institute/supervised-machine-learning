---
title: "Same Model, Different Analytic Goals"
subtitle: "Code Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/LASERLogoB.png
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
---

```{r}
#| include: false
```

```{r}
#| echo: false
# then load all the relevant packages
pacman::p_load(pacman, knitr, tidyverse, readxl)
```

## Process

-   Create a .R file in `/module-1`
-   Then, run copy and paste the code in this presentation as we talk through each step

## Quick discussion

-   What concerns do you have about coding in R (or python)?

**We'll take this part easily!**

# Code-along - Regression

Our aim: What relates to whether a Pokemon is *legendary* -- one that is ["incredibly rare and often very powerful Pokémon"](https://bulbapedia.bulbagarden.net/wiki/Legendary_Pok%C3%A9mon)?

## Data Dictionary

::: {style="font-size: 60%;"}

| **Column**     | **Type**          | **Description**                                                                         | **Example Values**           |
|----------------|-------------------|-----------------------------------------------------------------------------------------|-----------------------------|
| **name**       | Character         | The official name of the Pokémon.                                                       | Pikachu, Bulbasaur          |
| **type_1**     | Categorical       | The primary elemental type. Determines many battle strengths/weaknesses.                | Water, Fire, Grass, Electric|
| **type_2**     | Categorical       | The secondary elemental type, if applicable (often missing/NA for single-type Pokémon). | Flying, Poison, NA          |
| **hp**         | Numeric           | Base “Health Points” indicating how much damage a Pokémon can take before fainting.     | 35, 60, 100                 |
| **attack**     | Numeric           | Base Attack stat. Affects damage dealt by Physical moves.                               | 55, 82, 134                 |
| **defense**    | Numeric           | Base Defense stat. Affects damage received from Physical moves.                         | 40, 80, 95                  |
| **sp_atk**     | Numeric           | Base Special Attack stat. Affects damage dealt by Special moves (e.g., Flamethrower).   | 50, 90, 120                 |
| **sp_def**     | Numeric           | Base Special Defense stat. Affects damage received from Special moves.                  | 50, 85, 125                 |
| **speed**      | Numeric           | Base Speed stat, determining which Pokémon moves first in battle.                       | 35, 100, 130                |
| **generation** | Integer or Factor | Numerical indicator of the game generation the Pokémon was introduced (1, 2, 3, etc.).  | 1, 2, 3                     |
| **legendary**  | Boolean           | Indicates if the Pokémon is Legendary (TRUE/FALSE, 1/0).                                | FALSE, TRUE                 |
| **total**      | Numeric           | Sum of all base stats (HP + Attack + Defense + Sp. Atk + Sp. Def + Speed).              | 320, 540, 680               |
| **height**     | Numeric           | Pokémon’s approximate height (units vary by dataset, often meters).                     | 0.4, 1.7, 2.0               |
| **weight**     | Numeric           | Pokémon’s approximate weight (units vary by dataset, often kilograms).                  | 6.0, 90.5, 210.0            |
| **early_gen**  | Numeric           | Whether or not a Pokemon is 1st or 2nd gen                  | 1, 0            |

:::

## R Code

::: panel-tabset
## 0

**Loading, setting up**

```{r}
#| eval: false
#| echo: true
library(tidyverse)

pokemon <- read_csv("data/pokemon-data.csv")

pokemon %>% 
    glimpse()
```

## 1

**Fit model -- we'll just use three variables to begin with a very simple model - how do several variables relate to a Pokemon being 1st or 2nd gen relative to 3rd-6th**

```{r}
#| eval: false
#| echo: true

m1 <- glm(early_gen ~ height_m + weight_kg + hp,
          data = pokemon,
          family = "binomial")
```

## 2

**Interpret fit statistics, coefficients and standard errors, and p-values**

```{r}
#| eval: false
#| echo: true

summary(m1) # what do you notice about the coefficients?
```
:::

## python code

*AR edit based on the above regression, and comment*

```{python}
#| eval: false
#| echo: true


```

# Code-along - SML

Our aim: How well can we predict whether a Pokemon is *legendary* -- one that is ["incredibly rare and often very powerful Pokémon"](https://bulbapedia.bulbagarden.net/wiki/Legendary_Pok%C3%A9mon)?

## R Code

::: panel-tabset
## 0

**Loading, setting up**

```{r}
#| eval: false
#| echo: true

library(tidymodels)
```

## 1

**Split data**

```{r}
#| echo: true
#| eval: false

pokemon_split <- initial_split(pokemon, prop = 0.8)
train <- training(pokemon_split)
test <- testing(pokemon_split)
```

## 2

**Engineer features and specify recipe**

```{r}
#| echo: true
#| eval: false

pokemon_recipe <- recipe(early_gen ~ height_m + weight_kg + hp, data = train) %>% 
    step_mutate(early_gen = as.factor(early_gen))
```

## 3

**Specify recipe, model, and workflow**

```{r}
#| echo: true
#| eval: false

my_mod <- logistic_reg() %>%
    set_engine("glm") %>%
    set_mode("classification")

my_wf <- workflow() %>%
    add_recipe(pokemon_recipe) %>%
    add_model(my_mod)
```

## 4

**Fit model**

```{r}
#| echo: true
#| eval: false

log_reg_fit <- last_fit(my_wf, pokemon_split)
```

## 5

**Evaluate accuracy**

```{r}
#| echo: true
#| eval: false

collect_metrics(log_reg_fit)
```
:::

## python code

*AR edit*

```{python}
#| eval: false
#| echo: true


```

## Discussion

-   What do you notice about the differences in the output between regression and SML?
-   What went well? What was frustrating?
